#!/bin/bash

inst() {
    cp "$1" ~/.local/bin &&
        echo "Installed $1 to ~/.local/bin"
}

# execute 'find' and only output binary executeables.
function find_binaries() {
    find $@ -type f -executable -exec file -i '{}' \; \
        | grep 'x-executable; charset=binary'         \
        | cut -d: -f 1
}

# edit script in $PATH
es() {
    whereis $@               \
        | awk '{ print $2 }' \
        | xargs -r nvim
}

# general
alias py="python"
alias ipy="ipython"
alias lisp="rlwrap sbcl --noinform"
alias tm="tmux"
alias i3restart="killall -2 i3"
alias crfmt="crystal tool format"
alias luv="luvit"
alias reload="source ~/.zshrc"
alias wifi="sudo wifi toggle"
alias g="hub"
alias update="sudo pacman -Syu"
alias sv="sudoedit"
alias cr="crystal"
alias rm="rm -I"
alias ud="pushd ~/ &>/dev/null && git commit -a -m 'update dotfiles' && git push && popd"
alias l="clear"

function s() { find $@ | fzf | xargs -r $EDITOR }
alias dc='cd $(zcat ~/.dirs | fzf | sed "s|~|/home/$USER|g")'
alias updatedb='find / -type d -not -path "*/\.*" | sed "s|/home/peep|~|g" | gzip -9 -c > ~/.dirs'

# git
alias gp="git push"
alias gc="git commit"
alias gm="git merge"
alias gu="git pull"

# for note taking
alias cheat="$EDITOR ~/.cheatsheet.md"

# golang aliases
alias gob="go build"
alias sgo="pushd /usr/local/go/src"
alias gos="cd $GOPATH/src/"
alias gop="cd $GOPATH/src/github.com/UlisseMini/"
alias got="go test"
alias goi="go install"
alias gor="go run"

# Youtube stuffs
alias yt="youtube-dl --add-metadata -ic" # Download video link
alias yta="yt -x -f bestaudio/best" # Download only audio
alias YT="youtube-viewer" # Youtube streaming from the commandline!

# colors!
alias ls="ls --color=auto"
alias grep="grep --color=auto"
alias diff="diff --color=auto"

# Color cat - print file with syntax highlighting.
alias ccat="highlight --out-format=ansi -t 4"

cf() {
    if [[ "$1" == "" ]]; then
        echo "Usage: cf <file.vim>"
        return
    fi

    $EDITOR ~/.config/nvim/ftplugin/$1
}

# Build and compress binaries
gocompress() {
    out="${1:0:-3}"
    if [[ "$GOOS" == "windows" ]]; then
        out="$out.exe"
    fi

    go build -ldflags="-s -w" -o "$out" "$1"
    upx --brute --best "$out"
}

# editing
alias v="$EDITOR"
alias vi="$EDITOR"
alias vim="$EDITOR"
alias nvim="$EDITOR"

# make directory then cd into it
mc() {
    mkdir -pv $1 && \
        cd $1
    }

# make it easier to compile assembly progams
# i use the extention .asm so i'll trim the last 4 chars.
asm() {
    local out="${1:0:-4}"

    nasm -f elf64 "$1" -o $out.o && \
        ld $out.o -o $out && \
        rm $out.o
    }

# compile nasm assembly with linker
asmf() {
    local out="${1:0:-4}"

    nasm  -f elf64 "$1" -o $out.o && \
        ld $out.o -o $out -lc --dynamic-linker /lib/ld-2.28.so && \
        rm $out.o
    }

# disassemble programs with gdb, kinda a hack -- idc
disassemble() {
    echo "quit" | gdb -q -ex "disassemble main" $1 | tail -n +2 | head -n -1
}

# make it easier to compile C programs
c() {
    gcc -Wall "$1" -o "${1:0:-2}"
}

# compile and install C program to path
ci() {
    c $1 && mv ./${1:0:-2} ~/.local/bin
}

# killall function, that ACTUALLY kills all
ka() {
    while true; do
        # if killall fails then return
            killall $@ 2>/dev/null || break
            sleep 0.1
        done

    # show the processes
    ps awx | grep -v grep | grep "$1"
}

tor_mode_on() {
    sudo systemctl start tor
    export   all_proxy=$tor_proxy
    export  http_proxy=$tor_proxy
    export https_proxy=$tor_proxy
    echo "Tor mode enabled"
}

tor_mode_off() {
    sudo systemctl stop tor
    export   all_proxy=""
    export  http_proxy=""
    export https_proxy=""
    echo "Tor mode disabled"
}

# tor_mode, enable tor and set enviorment variables.
tor_mode() {
    pidof tor &>/dev/null && tor_mode_off || tor_mode_on
}
