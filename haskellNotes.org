#+TITLE: Haskell notes
#+OPTIONS: \n:t

* IO Monad composition
  *NOTE:*
	Monads are more general then they are shown here,
	but this is how they work at a basic level to do with IO.

  ~(>>) :: Monad m => m a -> m b -> m b~
  sort of like semicolon, do one IO action then another.
	#+BEGIN_SRC haskell
	  main :: IO ()
	  main = do
		putStr "Hello" >> putStrLn " World"
	#+END_SRC


	~(>>=) :: Monad m => m a -> (a -> m b) -> m b~
	do one IO action then send the output to another IO action
	#+BEGIN_SRC haskell
	  main :: IO ()
	  main = do
		getLine >>= putStrLn
	#+END_SRC

* Maybe
  ~maybe :: b -> (a -> b) -> Maybe a -> b~
  maybe takes a value to use when a is Nothing (a default) then checks
  if a is Not nothing, if it is not nothing it will call the function provided with
  the value, otherwise it returns the default value *without passing it through the function*.

* Functor
	#+BEGIN_SRC haskell
		class Functor (f :: * -> *) where
			fmap :: (a -> b) -> f a -> f b
			(<$) :: a -> f b -> f a
	#+END_SRC
	a functor is at its most basic, something that can be mapped,
	the first thing that comes to mind is of course a list. functors are much more
	general then lists though, take this example with Maybe's
	#+BEGIN_SRC haskell
	  main = do
		-- fmap will see that there is a valid value (Just 9) and pass it to (+1)
		print $ fmap (+1) (Just 9)  -- Outputs "Just 10"

		-- Outputs "Nothing"
		print $ fmap (+1) (Nothing)
		-- (fmap does not pass Nothing to (+1) it just returns nothing
	#+END_SRC
